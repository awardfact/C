C언어는 1970년도 벨 연구소에서 만들어져 현재까지 사용되는 프로그래밍 언어이다 
C언어는 이후에 생긴 언어에 많은 영향을 주었다

Chapter1

C언어의 역사 

C언어는 UNIX운영체제의 부산물로 생성되었다 벨 연구소의 켄 톰슨, 데니스 리치등의 C언어를 만들었다 
그 당시에 다른 운영체제들은 어셈블리 언어로 만들어졌는데 어셈블리는 디버그가 힘들고 성능을 향상시키기가 매우 어려웠다
UNIX도 예외는 아니였는데 톰슨은 이러한 문제를 해결하고 UNIX를 더 발전시키기 위해 
높은 레벨의 언어가 필요하다 생각했고 그는 B언어를 디자인했다 하지만 B언어는 PDP-11에 맞지 않다고 생각했고
리치는 더 향상된 버전을 개발했다 처음에는 NEW B언어로 불렸는데 유닉스가 1973년 C언어로 재개발 되었을 때 C언어로 불리게 되었다 
C언어는 70년대에 지속적으로 발전되었다 77~79년이 특히 그런데 이 기간동안 첫 C언어 책이 나오게 되었고 C프로그래머에게
바이블이 되었다 70년대에는 C프로그래머가 비교적 적고 대부분 유닉스 유저였는데 80년대에 들어와서 C컴파일러는
다양한 운영체제에서 사용되게 되였다 특히 IBM PC플랫폼에서 빠르게 성장했다 
C언어가 유명해지고 문제가 찾아왔는데 C컴파일러는 K&R에 의지하였는데 K&R은 언어의 특징이 모호하였고 
이 특징이 자주 다르게 사용되었다 또한 K&R은 이 특징들을 명확히 하는데에 실패했다 그리고 C언어는
K&R이 쓰여진 이후에도 계속적으로 바뀌었다 새로운 특징이 추가되고 오래된 특징은 삭제되었다 
그래서 C언어에 대한 명확한 설명이 필요해졌고 1983년부터 ANSI에서 표준을 만들기 시작하였고 
1989년에 공식적으로 ANSI표준이 승인되었다 이 표준을 C89또는 C90으로 부른다 그리고 이것은 C의 오리지널 버전으로
불리는 K&R과 분리되어진다 
95년에 여러 변화가 있었고 새로운 표준이 필요해졌고 99년에 C99로 불리는 새로운 표준이 승인되었다 


C언어 기반으로 만들어진 언어

C언어는 현대 언어에 거대한 영향을 주었고 아주 많은 언어가 C언어 기반으로 제작되었는데 그 중 중요한 언어는 다음과 같다
- C++  : C언어의 모든 특징을 가지고 있고 클래스와 다른 기능이 추가되었고 객체지향 프로그래밍 언어이다
- JAVA :  C++언어 기반으로 작성되어서 C언어의 많은 특징을 가지고 있다  
- C# : C++과 자바를 기반으로 만든 더 최신 언어이다 
- Perl : 원래는 간단한 스크립트 언어였는데 성장하면서 C언어의 많은 특징을 이식하였다 
C를 배우면 C기반으로 제작된 언어들을 배울때 강력한 통찰력을 주기 때문에 첫 언어로 C를 많이 배운다
그리고 C로 작성된 많은 오래된 코드들이 있어서 C언어를 배우면 이러한 코드를 유지보수 할 수 있다 
C는 여전히 개발에 널리 사용되는 언어이다 특히 메모리가 제한된 환경에서 아주 강력하다 


C언어의 강점과 약점

C의 특징
어느 프로그래밍 언어처럼 C언어도 강점과 약점을 가지고 있다 다음은 C언어의 근본적인 특징들이다
- C언어는 로우 레벨 언어이다  : C는 기계 레벨에 접근을 제공한다 이것은 다른 언어들에게는 감춰진 것이다
또한 컴퓨터에 내장된 명령과 가까워서 프로그램이 아주 빠르다 
- C언어는 작은 언어이다 : C언어는 다른 언어들이 제공하는 특징들이 제한된다 작은 언어의 특징을 가지고 있어서
C언어는 내장된 기본 함수에 의지한다 
- C언어는 자유로운 언어이다 : C언어는 많은 것들을 허용해서 다른 언어들에 비해 자유롭다 또한 다른 언어에서 강제하는
오류확인을 강제하지 않는다 


C의 강점
효율적이다 : C는 어셈블리가 사용될 때 만들어졌기 때문에 아주 빠르고 메모리 양이 제한된다 

이식성이 좋다 : 이식성은 프로그램의 주된 목적은 아니지만 강점중 하나이다 
 프로그램은 컴퓨터에서 동작하는데 PC부터 슈퍼컴퓨터까지 범위가 다양하기 때문에 C언어를 체택하는 경우도 많이 있다
C언어의 컴파일러는 작고 쉽게 쓰여졌다 이러한 특징이 다양한 가능성을 준다 

강력하다 : C는 다양한 데이터 타입과 연산이 있어 아주 작은 코드와 라인으로도 프로그램을 만들 수 있다

유연하다 :  C는 시스템 프로그래밍을 위해 디자인되었지만 이것에 대한 제약은 없다 C는 임베디드부터 상업적 데이터
프로그램까지 모든 분야에 사용된다 

기본 라이브러리가 존재한다 : C의 강점으로 기본 라이브러리가 있는데 이 라이브러리에는 입출력, 문자열 , 저장 할당 등
여러 유용한 수백가지의 함수가 존재한다

유닉스와의 통합 : C는 특히 유닉스와 강력하게 결합된다 

C의 약점
C의 약점은 기계와 가깝다는 C의 강점에 기반하기도 한다 

에러가 생기기 쉽다 : C의 유연성은 에러를 유발하기도 한다 C컴파일러는 다른 언어의 실수를 발견하지 못하는 경우가 많다
이런 점에서 C는 어셈블리와 많이 닮아있다 대부분의 에러는 실행동안 발견하지 못해서 더 많은 문제를 야기한다 
C는 또한 부주의했을 때 눈에 안 띄는 문제를 많이 가지고 있다 

이해하기가 어렵다 :  비록 C는 작은 언어이지만 다양한 방법으로 결합되기 떄문에 타인이 이해하기 어려운 경우가 많다
C의 간결함 때문에도 문제가 방생하는데 간결함을 목적으로 만들어졌기 때문에 읽고 수정하는데 많은 시간이 걸린다 
C의 유연성도 영향을 주는데 천재들이 자기만 알아보게 코드를 작성하면 이해하는게 거의 불가능하다 

수정하기가 어렵다 : C로 작성된 큰 프로그램은 제작될 때 유지보수를 고려하지 않았다면 수정이 매우 어렵다 
현대의 프로그래밍 언어 수정에 용이한 모듈과 클래스를 제공하는데 C언어는 이런 특징이 없다 

C를 효과적으로 사용하기
C를 효과적으로 사용하려면 C의 강점을 사용하고 약점은 숨겨야 한다 

위험을 피하기 : 현대의 컴파일러는 보통 위험을 감지하는데 모든 위험을 감지하지는 못 한다 그래서 위험이 자주발생하는
코드는 주의해서 작성해야한다

소프트웨어 툴을 사용하면 프로그램이 더 신뢰성이 생긴다 :  하나의 예로 lint라는 툴이 있는데 컴파일러보다 에러를
더 잘 잡는 툴이다 또한 디버거가 있는데 C컴파일러가 버그를 잘 잡지 못하기 때문에 이러한 툴을 사용한다면
프로그램의 신뢰성이 더 올라가게 된다 

코드 라이브러리를 이용하라 : C의 강점 중 하나는 많은 다른 사람들이 만든 코드를 라이브러리로 사용할 수 있다는 것이다
잘 맞는 라이브러리를 구하면 에러를 줄이고 효과적으로 프로그램을 만들 수 있다 많은 라이브러리가 있는데
공개되어있는 오픈 소스도 있고 구매해야하는 상업적 소스도 있다

코딩 규약을 따라라 : 코딩 규약은 강제적인 규칙은 아니지만 규약을 따른다면 프로그램 만드는 데 도움이 되고 
다른 사람의 코드를 읽는데 도움이 된다 코딩 규약은 어느 언어에서도 중요하다 

혼란스럽거나 복잡한 코드를 피해라 : C는 프로그램을 만드는 데 다양한 방법이 존재하고 프로그래머는 간결한 방법을
사용하는데에 유횩되는데 가장 짧은 방법은 종종 이해하기가 제일 어려운 방법이 된다 
이해하기 쉽고 복잡하지 않게 코드를 짜야한다 

표준을 지켜라 : 대부분의 C컴파일러는 C89 , C99의 표준이 아닌 라이브러리 함수를 제공한다 
이해안되는 것을 피하기 위해서는 이러한 것들을 꼭 필요하지 않는 한 피해야한다 

chap2

pun.c
#include <stdio.h>

int main(void) {
	printf("To C, or not to C : that is the question.\n");
	return 0;
}
해당 코드에서 "include"부분은 해당 소스는 C의 표준 I/O라이브러리를 불러오는 코드이다 
그리고 "main"함수는 처음 실행하는 부분이고 무조건 있어야 하는 함수이다
printf는 표준 i/o라이브러리에 있는 함수이며 함수 안의 내용을 출력해준다  해당 함수 안의 "\n"은 다음줄로 넘어가게 해주는 코드이다
메인 함수에서 return 0;을 실행하면 프로그램이 종료된다 
그리고 파일 이름은 어느것이던지 상관이 없지만 c 확장자는 컴파일러에게 필요하다 
그리고 해당 파일을 실행하기 위해서는 기계가 실행할 수 있는 파일로 변환해야 한다 변환을 위해서는 세 스텝이 필요하다
1. 전처리  : 프로그램은 처음에 전처리기에 주어진다 전처리기는 그것을 프로그램에 추가하고 변환시킨다 
2.컴파일링 : 변환된 프로그램은 컴파일러에 이동된다 컴파일러는 이것을 기계어로 번역한다(오브젝트 코드 생성) 
3. 링킹 : 마지막 단계이다 링커는 컴파일러가 생성한 오브젝트 코드와 프로그램 실행에 필요한 추가적인 코드를 결합한다 
C언어에서 이 과정은 자동으로 진행된다 
전처리는 보통 컴파일러와 통합되어 실행된다 

컴파일, 링크 등에 필요한 명령은 컴파일러와 OS에 따라 각기 다르다 UNIX에서는 보통 cc명령을 사용한다(gcc컴파일러는 gcc) 
ex) cc pun.c
cc명령에는 다양한 옵션이 있다 대표적으로 -o가 있는데 -o뒤에 이름을 쓰면 해당 이름의 실행파일이 생성된다 
ex) cc -o pun pun.c

통합 개발환경(IDE)
이렇게 컴파일을 하려면 os에서 제공하는 시스템에 들어가서 직접 커멘드를 입력해서 실행해야하는데
IDE를 이용하면 수정,컴파일,링킹,실행,디버그 등을 한꺼번에 할 수 있다 
또한 에러가 있는 라인을 표시하여 오류도 잡을 수 있다 	


C 프로그램은 다음과 같은 형식으로 일반화할 수 있다

directives

int main(void){
	statement
}
C는 다른 언어들과 같이 { 와 } 로 시작과 끝을 나타낸다 그리고 C언어는 3가지 특징이 있는데 
지시문(directive) , 함수 (function) , 내용(statement)이다


지시문 
지시문 C프로그램을 컴파일 하기전에 전처리기에 의해 가장먼저 수정된다 
#include <stdio.h> <- 이것이 가장 기본적인 지시문이다 
이 지시문은 컴파일 하기 전에 기본 I/O라이브러리 정보를 포함시킨다 그리고 C는 이와같은 여러 헤더를 가지는데 각각 헤더는
기본 라이브러리 정보들을 포함한다 C언어는 다른 언어와 달리 내장된 입출력 능력이 없어서 기본 라이브러리의 함수를 대신 사용한다
지시문은 항상 #으로 시작한다 그리고 하나의 라인으로 구성되며 세미콜론은 필요없다 

함수 
함수는 다른 언어에서 절차나 서브루틴과 비슷하다 
함수는 두 카테고리가 있는데 프로그래머가 만든 함수와 C에서 제공되는 라이브러리 함수가 있다 
라이브러리 함수는 컴파일러와 함께 제공된다 
함수는 수학용어이기도 한데 하나 이상의 인수가 주어졌을떄 값을 계산해준다 
C에서 함수는 더 간단한데 연속된 코드가 하나로 묶이고 이름이 주어진다 
그리고 계산된 값이 주어지기도 하고 아니기도 한데 계산된 값은 return 코드로 주어진다 return은 하나만 실행된다 
C에서는 많은 함수가 있지만  main함수는 무조건 있어야한다 main함수는 프로그램이 실행될 때  자동으로 호출되고 
오직 한개의 메인 함수가 존재할 수 있다 메인함수에서 return 은 프로그램의 종료를 의미한다 
int main(void) {
	printf("To C, or not to C : that is the question.\n");
	return 0;
}
이 함수가 있을 떄 int는 해당 함수가 return할 때 어떤 형식으로 리턴을 할지를 나타낸다 void부분은 매개변수인데 
void는 매개변수가 없음을 나타낸다 그리고 메인 함수에서 리턴은 무조건 0을 해야한다 리턴이 없어도 실행은 되지만
대부분 컴파일러는 에러를 출력한다 

코드
코드는 프로그램이 실행하기 위한 명령문이다 예를들어 printf는 해당 함수를 호출하고 해당 함수는 스크린에
문자를 출력해준다 그리고 C언어는 각각 코드의 끝에 세미콜론이 있어야 한다 
컴파일러는 세미콜론을 끝으로 보기 떄문에 코드를 여러라인에 걸쳐서 작성할 수 있다 

문자열 출력
printf함수는 강력한 함수이다 "" 안에 있는 문자들을 출력해준다 
printf함수는 끝난 후에 자동으로 다음 줄로 출력을 넘기지 않는다 하나의 라인으로 사용을 하려면 \n을 포함시켜야한다
\n을 쓰면 현재 줄이 끝나고 다음줄로 넘어간다 또한 \n은 한 printf함수에서 여러번 사용이 가능하다 

주석
c프로그램에서 문서화는 아주 중요하다 모든 프로그램은 프로그램 이름, 작성일, 저자, 목적 등의 정보가 필요하다 
C에서는 /*로 시작하고 */로 끝내는  심볼을 이용해서 주석을 달 수 있다  
ex) /* this is comment */
주석은 프로그램 어디든지 작성할 수 있다 그리고 /* */ 심볼을 이용해서 주석을 달면 컴파일러는 */가 나올때까지 읽기
떄문에 여러줄에 걸처서 작성을 할 수도 있다 주석을 여러줄로 할 때 /* */만 사용하면 읽기가 어려울 수 있어서 
*로 박스를 만들어서 가독성을 높이는 방법도 있다 프로그래머는 대부분 
/*
* 내용
*/
이런식으로 가상에 별을 넣어서 주석을 만든다 그리고 주석을 끝맺지 않고 코드를 작성하면 그 코드도 주석이 된다 
C99부터는 다른 타입의 주석을 제공하는데 //로 주석을 다는것이다 
ex) // This is comment 
이 주석은 줄이 끝나면 자동으로 종료된다 여러줄에 주석을 달려면 /* */방법을 사용하거나 줄마다 //를 달아야한다 
//를 사용하면 종료를 명시할 필요가 없다는 장점이 있다 	

변수와 할당 
대부분의 프로그램을 출력을 하기전에 미리 계산을 시킨다 그리고 이것을 하기 위해서는 데이터를 일시적으로 저장할 곳이 필요하다
대부분 프로그래밍 언어에서는 변수를 이러한 저장장소로 사용한다 

타입
모든 변수는 타입을 가진다 타입은 어떤 종류의 데이터를 저장할지 명시한다 
타입은 저장할 수 있는 최소 숫자와 최대 숫자의 범위를 가진다 
int는 최대 2147483647의 범위를 가진다 
float는 더큰 숫자를 가질 수 있고 소수점도 표현이 가능하다 하지만 float는 int보다 느리다는 단점이 있다 
그리고 많은 경우에서 float는 근사치를 가지는 경우가 많다 예를들어 0.1를 저장했는데 나중에 볼떄는
0.0999999999987로 나오는 경우가 있다 

선언
변수를 사용하기 위해서는 반드시 선언을 해야한다 선언을 하기 위해서는 먼저 변수의 타입을 입력한다 
그리고 나서 변수의 이름을 입력한다 
ex) int height; float profit; 인트형으로 height변수 선언, float형으로 profit변수 선언
한번에 여러 변수도 선언이 가능하다 ( int height, length, width , volume;)
그리고 변수를 선언하는 부분과 코드부분을 빈 줄로 구분하는것이 가독성에 좋다 
변수를 코드 위쪽에 선언을 하는것이 맞지만 C99부터는 이것이 의무는 아니다 

할당
변수는 값을 할당할 수 있는데 다음과 같이 한다
ex) height = 8; length = 12; width = 10;
할당된 값은 바뀌기 전까지 지속된다 그리고 값 할당은 반드시 선언 이후에 해야한다 
그리고 float값을 할당할때는 보통 소수점을 사용한다 
ex) float profit = 2150.48;
float변수에 지속적으로 소수점을 포함하려면 끝에 f를 붙이면 좋다 (float profit = 2150.48f;)
f를 안붙이면 컴파일려가 경고를 출력한다 
한번 할당된 변수는 다른 변수 계산에 사용할 수 있다
ex) height = 8;  length = 12; width = 10; volume = height * length * width;(여기서 *는 곱하기 연산을 의미한다)

변수의 값 출력
printf함수를 이용하여 변수의 값을 출력할 수 있다 
ex)printf("Height : %d\n", height); 여기서 %d는 height값으로 대체한다 
%d는 오직 int값만 출력이 가능하다  float타입 값을 출력하려면 %f로 사용해야한다 float는 소수점 6자리까지 출력된다
소수점 자리를 설정을 하고 싶다면 다음과 같이 사용한다
ex) printf("profit : %.2f\n" , profit); 이렇게 하면 소수점 2자리수까지 출력된다 
printf에서 사용할 수 있는 변수의 개수에는 제한이 없다  
printf함수 내에서 연산해서 값을 출력할 수도 있다
ex) printf("%d\n" , height * length * width);

/는 나누기 연산을 의미하는데 나눠지는 값이 정수면 연산 결과는 소수점을 버린 정수가 나온다 

초기값 설정
어떤 변수는 자동으로 0으로 초기화 된다 그러나 대부분의 경우는 그렇지 않다 
그래서 항상 변수를 선언할 떄 값을 초기화 해주는 것이 좋다 
ex) int height = 8;  
변수를 한꺼번에 초기화는 할 수 없다
ex) int height , length , width = 10; 이렇게 하면 width만 10으로 초기화되고 나머지는 초기화되지않는다 


입력받기
scanf함수를 통해 사용자에게 값을 입력받을 수 있다 scanf는 printf와 대응되는 함수여서 구성이 비슷하다 사용은 다음과 같이 한다
ex) scanf("%d" , &i);  int값을 받아와서 i에 넣는다
%d는 printf에서와 마찬가지로 int형 값을 받는다는것을 의미한다 &i는 i의 주소를 나타낸다 
i의 주소에 int형 값을 넣는다는 것을 의미한다 floaat형은 다음과 같이 사용한다
ex) scnaf("%f", &x);  float값을 받아서 x에 넣는다 

매크로 상수 선언
매크로 상수는 선언하면 그 값은 바꿀 수 없게된다 선언은 다음과 같이 한다
#define INCHES_PER_POUND 166
#define은#include처럼 전처리기쪽에서 수행해서 세미콜론을 사용하지 않고 줄이 끝나면 명령이 끝난다 
컴파일할때 전처리기는 각각의 매크로 값을 코드에서 치환한다
ex) weight = (volume + INCHES_PER_POUND - 1) / INCHES_PER_POUND); 여기서 매크로 상수 부분이 166으로 변한다
매크로 상수는 대문자를 사용하고 문장 사이에는_를 넣는다 

식별자
식별자는 변수, 함수, 매크로 등에 이름을 붙인것을 말한다 식별자는 알파벳, 숫자, 그리고 _ 가 들어갈 수 있다 그러나
반드시 처음은 알파벳 또는 _ 가 들어가야 한다 
ex) times10 , goet_next_char  _done 옳은 식별자 
ex) 10time  get-next-char  옳지 않은 식별자( 숫자가 맨 앞, 들어올 수 없는 문자가 들어감)
그리고 C는 대문자와 소문자가 구별이 된다 그래서 아래는 모두 다른 식별자이다
ex) job joB jOb jOB Job JoB JOB JoB
C프로그래머가 식별자 이름을 지을때 관례가 있는데 하나는 _로 구분을 하는것이다
ex) symbol_table current_page name_and_address(스네이크 표기법)
그리고 하나는 대문자로 구분을 하는 것이다
ex) symbolTable currentPage nameAndAddress(카멜표기법)
키워드는 식별자의 이름으로 사용할 수 없다 다음은 C에서 사용하는 키워드들인데 식별자로 사용할 수 없다

키워드
auto	enum	restrict(C99부터)	unsingned	break
extern	return	void	case	float	short	volatile
char	for	signed	while	const	goto	sizeof
_Bool(C99부터)	continue	if	static	_Complex(C99부터)
default	inline(C99부터)	struct	_Imaginary(C99부터)    do
int	switch	double	long	typedef	else	register	union


C프로그램 배치
C프로그램은 연속적인 토큰으로 구성되는데 식별자나 키워드는 그 의미를 바꿀 수 없다 
+, - 나 ; 같은 printf함수를 호출하는 코드가 있을 떄 항목은 7개로 나눌 수 있다
ex) printf - 1번째토큰  ( - 2번째 토큰  "Height : %d\n" - 3번쨰 토큰   , - 4번째 토큰  height - 5번쨰 토큰 ) -6번쨰 토큰 ; - 7번째 토큰
여기서 1,5번은 식별자이고 3번은 문자열 2,4,6,7은 구두점에 해당된다 토큰들 사이의 공간은 대부분의 경우에는 
크게 의미가 없다 하지만 가독성을 위해서는 적절한 공간이 필요하다 
토큰 사이의 스페이스,  탭, 줄바꿈 등을 사용하는 규칙은 프로그램 배치에 아주 중요하다 
1. 코드를 한줄로 하기가 너무 길어 한줄로 하기 어려우면 여러 라인으로 나눌 수 있다
2. 토큰 사이의 공간은 가독성에 좋기 때문에 각각 연산 사이에는 공간을 두는것이 좋다 
3. 들여쓰기는 블럭 공간을 구성하기에 좋다 
4. 비어있는 줄은 프로그램 구조를 보기 쉽게 만들어준다 
토큰 내에서 공간을 주면 프로그램 오류를 유발할 수 있다 그리고 문자열 사이에 줄바꿈을 하면 오류가 생긴다
  
 
