http 는 단방향 통신  - 클라이언트가 요청할때만 서버가 응답 
  
socket은 양방향 통신  - 특정 포트를 통해 실시간으로 양방향 통신

프로토콜 , IP, 포트를  통해 연결 

Stram - 데이터가 이동하는 통로 


서버는 포트를 열고 클라이언트의 접속을 기다림




클라이언트는 서버의 아이피와 포트를 통해 연결 

socket -> bind -> listen -> accept -> send,recv -> close 
socket                     -> connect    -> send, recv -> close \


헤더 
<netinet/in.h>  -  프로토콜 매크로 값들이 들어가 있는 함수 
<sys/socket.h>  - socket, listen accept, bind connect 등 소켓 관련 함수들이 들어있는 헤더 

서버 



1.소켓 생성
int sockfd = socket(domain , type , protocol) 함수를 사용

domain - 
PF_INET, AF_INET	IPv4 인터넷 프로토콜을 사용합니다.
PF_INET6	IPv6 인터넷 프로토콜을 사용합니다.
PF_LOCAL, AF_UNIX	같은 시스템 내에서 프로세스 끼리 통신합니다.
PF_PACKET	Low level socket 을 인터페이스를 이용합니다.
PF_IPX	IPX 노벨 프로토콜을 사용합니다.


type -
SOCK_STREAM	TCP/IP 프로토콜을 이용합니다.
SOCK_DGRAM	UDP/IP 프로토콜을 이용합니다.

protocol - 
0이면 IP

2.소켓옵션 설정
int setsockopt(int sockfd, int level, int optname,  const void *optval, socklen_t optlen);

sockfd - 옵션을 적용할 소켓( 소켓생성했을 때 반환값을 넣으면 된다)
level - 
optname 값이 socket level인지 특정 protocol에 대한 설정인지를 지정하는 값
 SOL_SOCKET : optname이 socket level에서 설정하는 option명임을 지정함
 IPPROTO_IP : optname이 IP protocol level에서 설정하는 option명임을 지정함
 IPPROTO_TCP : optname이 TCP protocol level에서 설정하는 option명임을 지정함

-optname
level에 따라 달라지며 SOL_SOCKET일 떄 

옵션값	데이터형	설명
SO_BROADCAST	BOOL	브로드캐스트 메시지 전달이 가능하도록 한다.
SO_DEBUG	BOOL	디버깅 정보를 레코딩 한다.
SO_DONTLINGER	BOOL	소켓을 닫을때 보내지 않은 데이터를 보내기 위해서 블럭되지 않도록 한다.
SO_DONTROUTE	BOOL	라우팅 하지 않고 직접 인터페이스로 보낸다.
SO_OOBINLINE	BOOL	OOB 데이터 전송을 설정할때, 일반 입력 큐에서 데이터를 읽을 수 있게 한다. 이 플래그를 켜면 recv(:12)나 send(:12)에서 MSG_OOB 플래그를 사용할 필요 없이 OOB 데이터를 읽을 수 있다.
SO_GROUP_PRIORITY	int	사용하지 않음
SO_KEEPALIVE	BOOL	Keepalives를 전달한다.
SO_LINGER	struct LINGER	소켓을 닫을 때 전송되지 않은 데이터의 처리 규칙
SO_RCVBUF	int	데이터를 수신하기 위한 버퍼공간의 명시
SO_REUSEADDR	BOOL	이미 사용된 주소를 재사용 (bind) 하도록 한다.
SO_SNDBUF	int	데이터 전송을 위한 버퍼공간 명시 다음과 같다 

-optval  : optname에 따른 설정할 값   예제들에서는 보통 int x =1 하고 x를 넣으 ㅁ
-optlen   : optval의 크기    예제들에서는 보통 optval을 sizeof해서 넣음 




3.바인드 
int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

socketfd -  소켓( 소켓생성했을 때 반환값을 넣으면 된다)
*addr - 보통 struct sockaddr_in 구조체 변수를 선언한 다음에 
구조체변수.sin_family = AF_INET;   => IP주소를 사용할 떄 이렇게 함 
구조체변수.sin_addr.s_addr  = IP주소 
구조체변수.sin_port = 포트번호   
한다음에   (struct sockaddr*)&구조체변수 이렇게 넣는다 

addrlen
구조체변수를 sizeof한것을 넣는다 


struct sockaddr {
        ushort  sa_family;
        char    sa_data[14];
};

struct sockaddr_in {
        short   sin_family;
        u_short sin_port;
        struct  in_addr sin_addr;
        char    sin_zero[8];
};


4. listen 

int listen(int sockfd, int backlog);


socketfd -  소켓( 소켓생성했을 때 반환값을 넣으면 된다)
backlog - 큐가 증가할 수 있는 최대 길이 



5. Accept

int new_socket= accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);

socketfd -  소켓( 소켓생성했을 때 반환값을 넣으면 된다)
*addr - 바인드때 넣었던것과 동일하게 넣음
*addrlen  -  구조체를 선언하고 
int a = sizeof(구조체) 한다음에    &a를 여기에 넣는다 


데이터 받아오는거는
int read(int s , char *buf, int len): 함수 사용 
s는 소켓 
buf는 받아올 버퍼의 포인터 , len은 버퍼의 길이를 넣는다 

데이터 전송은 write(int s , char *buf, int len)함수 사용
s는 소켓 
buf는 전송할 버퍼의 포인터 , len은 버퍼의 길이를 넣는다 

클라이언트 연결종료 
close(int s);  
s는 accept할떄 반환한 값 또는 소켓을 넣는다 




클라이언트 

1. 소켓 연결 
서버와 동일한 방식으로 연결 


2. 연결 
int connect( int sockfd , const struct sockaddr *addr, socklent_t addrlen);

3. 주고받기 


리눅스에서 서버 이걸로 컴파일
gcc cJSON.c socketServer.c -o server -I/usr/local/include/libmongoc-1.0 -I/usr/local/include/libbson-1.0 -L/usr/local/lib/ -L/usr/lib6 -lmongoc-1.0 -lbson-1.0 -lpthread
